#!/usr/bin/env python3

import io
import socket
import select
import struct
import time
import os

def run():
    server_socket = socket.socket()
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind(('0.0.0.0', 8002))
    server_socket.listen(0)

    while True:
        print("Data server awaiting connection")
        
        connection = server_socket.accept()[0]
        
        print("Data server connected")
        
        try:
            while True:
                ready = select.select([connection], [], [], 0.100)[0] # 100ms timeout
                
                while ready:
                    sz = struct.unpack('<L', connection.recv(struct.calcsize('<L')))[0]
                    if not sz:
                        raise Exception("Could not unpack")
                        
                    msg = ''
                    while len(msg) < sz:
                        msg = connection.recv(sz-len(msg))
                        
                    # Apply commands
                    if sz == 12:
                        msg = struct.unpack('<lll', msg)
                        msg = msg + (0, 0, 0)
                    elif sz == 15:
                        msg = struct.unpack('<lllBBB', msg)
                    else:
                        print("Unknown message size ", sz)
                        break
                        
                    ready = select.select([connection], [], [], 0)[0]
                    
                # Construct status
                msg = struct.pack('<ll', 1, 2)
                msg = msg + struct.pack('<lllll', 3, 4, 5, 6, 7)
                msg = msg + struct.pack('<f', 8.0)
                msg = msg + struct.pack('<llll', 9, 10, 11, 12)
                msg = msg + struct.pack('<ll', 13, 14)
                msg = struct.pack('<L', len(msg)) + msg
                connection.send(msg)
        except Exception as e:
            print("Data server error: ", e)
            pass
        finally:
            try:
                connection.close()
            except:
                pass

    server_socket.close()

if __name__ == '__main__':
    run()
